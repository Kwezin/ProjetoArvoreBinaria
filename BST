package projetoEstruturaDados;

import java.util.ArrayList;
import java.util.List;

public class VeryBasicTokenizer {
    private char[] input;
    private int index;

    public VeryBasicTokenizer(String str) {
        input = str.toCharArray();
        index = 0;
    }

    // Avança em um próximo caractere e retorna seu valor.
    // Não avança se já estiver no final da string.
    private char getNextChar() {
        if (index >= input.length) {
            return '\0';
        }
        return input[index++];
    }

    // Separa a string em tokens e retorna uma lista de strings.
    // Os tokens são números (decimais e flutuantes), operadores aritméticos, e parênteses.
    public List<String> tokenize() {
        List<String> tokens = new ArrayList<>();
        char currChar = getNextChar();
        StringBuilder sb = new StringBuilder();

        boolean isTokenizing = true;
        int count = 0; // Conta de parênteses
        while (isTokenizing) {
            // Ignora espaços em branco.
            while (Character.isWhitespace(currChar)) {
                currChar = getNextChar();
            }

            // Reconhece números (incluindo ponto flutuante)
            if (Character.isDigit(currChar) || currChar == '.') {
                sb.setLength(0);
                boolean hasDecimalPoint = (currChar == '.'); // Se começa com ponto
                
                // Primeira iteração caso o número comece com "."
                if (hasDecimalPoint) {
                    sb.append(currChar);
                    currChar = getNextChar();
                }

                while (Character.isDigit(currChar) || (!hasDecimalPoint && currChar == '.')) {
                    if (currChar == '.') {
                        hasDecimalPoint = true;  // Marca que já encontramos um ponto decimal
                    }
                    sb.append(currChar);
                    currChar = getNextChar();
                }
                tokens.add(sb.toString());  // Adiciona o número completo como token
            }
            // Reconhece operadores '+', '-', '*', '/'
            else if (currChar == '+' || currChar == '-' || currChar == '*' || currChar == '/') {
                tokens.add(String.valueOf(currChar));  // Adiciona o operador como token
                currChar = getNextChar();
                
                // Verifica se o próximo caractere é um número ou parênteses abrindo
                if (!Character.isDigit(currChar) && currChar != '(') {
                    System.out.println("Erro: Operador '" + tokens.get(tokens.size() - 1) + "' deve ser seguido por um número ou '('.");
                    return tokens; // Saída prematura devido ao erro
                }
                
                // Se o próximo caractere for um número, continua a tokenização do número
                if (Character.isDigit(currChar) || currChar == '.') {
                    sb.setLength(0); // Limpa o StringBuilder para iniciar o número
                    boolean hasDecimalPoint = false;

                    // Lógica para capturar números após o operador
                    while (Character.isDigit(currChar) || (!hasDecimalPoint && currChar == '.')) {
                        if (currChar == '.') {
                            hasDecimalPoint = true;
                        }
                        sb.append(currChar);
                        currChar = getNextChar();
                    }

                    tokens.add(sb.toString()); // Adiciona o número após o operador como token
                }
            }
            // Reconhece parênteses '('
            else if (currChar == '(') {
                count++; // Incrementa a contagem de parênteses abertos
                tokens.add("(");
                currChar = getNextChar();
            }
            // Reconhece parênteses ')'
            else if (currChar == ')') {
                count--; // Decrementa a contagem de parênteses fechados
                if (count < 0) {
                    System.out.println("Erro: Fechamento de parênteses sem abertura correspondente.");
                    return tokens; // Saída prematura ao encontrar erro de parênteses
                }
                tokens.add(")");
                currChar = getNextChar();
            }
            // Verifica se chegou ao final da string
            else if (currChar == '\0') {
                isTokenizing = false;
            }
            // Se encontrar um caractere não reconhecido, imprime uma mensagem de erro
            else {
                System.out.println("Token não reconhecido: " + currChar);
                currChar = getNextChar();
            }
        }

        // Verificação final de parênteses abertos sem correspondência
        if (count != 0) {
            System.out.println("Erro: Parênteses abertos não foram fechados corretamente.");
        }

        return tokens;
    }
}
