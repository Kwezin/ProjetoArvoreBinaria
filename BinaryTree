package projetoEstruturaDados;
//(3+6)*(4-1)+5
//Kauê Henrique Matias Alves - 10417894
//Matheus Alonso Varjão - 10417888
//Leonardo Moreira dos Santos - 10417555

import java.util.Stack;


class BinaryTree{

	private NodeOperador root;
	
	public BinaryTree() {
		this.root = null;
	}

	public BinaryTree(NodeOperador root) {
		this.root = root;
	}

	public boolean isEmpty() {
		return root == null;

	}
	
	public float percorreContando() {
		return percorreContando(root);
	}
	
	private float percorreContando(NodeBase atual) {
		if(atual.isLeaf()) {
			return atual.Visitar();
		}
		else {
			percorreContando(atual.getLeft()); // Percorre o filho esquerdo
	        percorreContando(atual.getRight());
			return atual.Visitar();
		}
		
	}
	
	public boolean criaArvore(StringBuilder expressao_saida) {
		// Construção da árvore
        Stack<NodeBase> pilha2 = new Stack<>();
        
        
        for (int j = 0; j < expressao_saida.length(); j++) {
            char caractere = expressao_saida.charAt(j);
            if (caractere == ' ') {
                continue; // Ignora os espaços
            }
            // Se for um número, pode ser um operando com vários dígitos
            if (Character.isDigit(caractere)) {
                StringBuilder num = new StringBuilder();
                
                // Continua acumulando os dígitos até encontrar um espaço
                while (j < expressao_saida.length() && expressao_saida.charAt(j) != ' ') {
                    num.append(expressao_saida.charAt(j));
                    j++;
                }
                j--;
                // Empilha o operando completo
                pilha2.push(new NodeOperando(num.toString()));
                
                
            } else { 

            	// Cria o nó operador (ajustando o construtor)
                NodeOperador noOperador = new NodeOperador(Character.toString(caractere), null, null);

                // Desempilha os dois últimos operandos ou operadores (usando NodeBase)
                NodeBase noOperadorRight = pilha2.pop(); // Desempilha o operador ou operando da direita
                NodeBase noOperadorLeft = pilha2.pop();  // Desempilha o operador ou operando da esquerda

                // Define os filhos do nó operador
                noOperador.setRight(noOperadorRight);
                noOperador.setLeft(noOperadorLeft);

                // Empilha o nó operador para uso posterior
                pilha2.push(noOperador);
            }
        }
     // O último elemento restante na pilha será o root
        if (!pilha2.isEmpty()) {
            root = (NodeOperador) pilha2.pop();
        }

        // Define o root na árvore
        if (root != null) {
            return true;
        } else {
            System.out.println("Erro ao criar a árvore.");
            return false;
        }
	}


	public void emOrdem() {
		emOrdem(root);
	}

	private void emOrdem(NodeBase atual) {
		if (atual != null) {
			emOrdem(atual.getLeft());
			System.out.print(atual.getData() + " ");
			emOrdem(atual.getRight());
		}
	}

	public void preOrdem() {
		preOrdem(root);
	}

	private void preOrdem(NodeBase atual) {
		if (atual != null) {
			System.out.print(atual.getData() + " ");
			preOrdem(atual.getLeft());
			preOrdem(atual.getRight());
		}
	}

	public void posOrdem() {
		posOrdem(root);
	}

	private void posOrdem(NodeBase atual) {
		if (atual != null) {
			posOrdem(atual.getLeft());
			posOrdem(atual.getRight());
			System.out.print(atual.getData() + " ");
		}
	}

	public NodeOperador getRoot() {
		return root;
	}

	public void setRoot(NodeOperador root) {
		this.root = root;
	}
}
