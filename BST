package projetoEstruturaDados;

import java.util.ArrayList;
import java.util.List;

public class VeryBasicTokenizer {
    private char[] input;
    private int index;
    private boolean valido;
    private int count_parenteses;
    private int count_operadores;
    private int count_operandos;

    public VeryBasicTokenizer(String str) {
        input = str.toCharArray();
        index = 0;
        valido = false;
        count_parenteses = 0;
        count_operadores = 0;
        count_operandos = 0;
    }

    private char getNextChar() {
        if (index >= input.length) {
            return '\0';
        }
        return input[index++];
    }

    public List<String> tokenize() {
        List<String> tokens = new ArrayList<String>();
        StringBuilder sb = new StringBuilder();
        char currChar = getNextChar();

        while (true) {
            // Ignorar espaços em branco
            while (Character.isWhitespace(currChar)) {
                currChar = getNextChar();
            }

            if (currChar == '\0') {
                if(count_parenteses == 0 && count_operadores+1 == count_operandos) {
                  valido = true;
                }else {
                  valido = false;
                }
                break; // Terminar se o final da string for alcançado
            }

            if (Character.isDigit(currChar)) {
            	count_operandos++;
                sb.setLength(0); // Limpar o StringBuilder
                while (Character.isDigit(currChar)) {
                    sb.append(currChar);
                    currChar = getNextChar();
                }
                tokens.add(sb.toString());

            } else if (currChar == '+') {
            	count_operadores++;
                tokens.add("+");
                currChar = getNextChar();
                

            } else if (currChar == '-') {
            	count_operadores++;
                tokens.add("-");
                currChar = getNextChar();
                


            } else if (currChar == '*') {
            	count_operadores++;
                tokens.add("*");
                currChar = getNextChar();
                


            } else if (currChar == '/') {
            	count_operadores++;
                tokens.add("/");
                currChar = getNextChar();
                

            } else if (currChar == '.') {
            	count_operandos--;
                tokens.add(".");
                currChar = getNextChar();
                

            } else if (currChar == '(') {
            	count_parenteses++;
                tokens.add("(");
                currChar = getNextChar();

            } else if (currChar == ')') {
            	count_parenteses--;
                tokens.add(")");
                currChar = getNextChar();


            } else {

                break; // Terminar no caso de um token não reconhecido
            }
        }

        return tokens;
    }

    public boolean getValido() {
      return valido;
    }
}
